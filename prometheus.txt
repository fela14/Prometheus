DOCKER

git clone https://github.com/rslim087a/prometheus-docker-compose.git
cd prometheus-docker-compose/
docker-compose up -d

curl -X GET https://8000-port-fcxujocxms4hokmr.labs.kodekloud.com/ \
&& \
curl -X GET https://8000-port-fcxujocxms4hokmr.labs.kodekloud.com/ \
&& \
curl -X POST -H "Content-Type: application/json" \
  -d '{"input": "value"}' \
  https://8000-port-fcxujocxms4hokmr.labs.kodekloud.com/items \
&& \
curl -X PUT -H "Content-Type: application/json" \
  -d '{"input": "value"}' \
  https://8000-port-fcxujocxms4hokmr.labs.kodekloud.com/items/5 \
&& \
curl -X GET -H "Content-Type: application/json" \
  -d '{"input": "value"}' \
  https://8000-port-fcxujocxms4hokmr.labs.kodekloud.com/items/5 \
&& \
curl -X UPDATE -H "Content-Type: application/json" \
  -d '{"input": "value"}' \
  https://8000-port-fcxujocxms4hokmr.labs.kodekloud.com/items/5 \
&& \
curl -X DELETE -H "Content-Type: application/json" \
  -d '{"input": "value"}' \
  https://8000-port-fcxujocxms4hokmr.labs.kodekloud.com/items/5 


+*+*+*+*+*+* Grafana Dashboard +*+*+*+*+*+*
================ Panels =================
# Process Uptime
time() - process_start_time_seconds{job="fastapi-app"}
label_values(up, job) -> set variable
time() - process_start_time_seconds{job="$job"}

# Total Requests
sum(increase(http_request_total{job="fastapi-app"}[5m]))
sum(increase(http_request_total{job="$job"}[$__range]))

# Error Rate
100 * sum(
  increase(http_request_total{job="fastapi-app", status=~"4..|5.."}[5m]) or vector(0)
)
/
sum(
  increase(http_request_total{job="fastapi-app"}[5m]) or vector(0)
)
100 * sum(
  increase(http_request_total{job="$job", status=~"4..|5.."}[$__range]) or vector(0)
)
/
sum(
  increase(http_request_total{job="$job"}[$__range]) or vector(0)
)

================ Rows =================
# Average Request Duration
sum(rate(http_request_duration_seconds_sum[5m])) / sum(rate(http_request_duration_seconds_count[5m]))
legend -> {{method}}{{path}}{{status}}

# API Throughput
rate(http_request_total{job="fastapi-app"}[5m])

# Requests by Status Codes
sum(rate(http_request_total{job="fastapi-app"}[5m])) by (method)

# API Latency Percentiles
histogram_quantile(
  0.95,
  sum(rate(http_request_duration_seconds_bucket{job="fastapi-app"}[5m])) by (le)
)
histogram_quantile(
  0.99,
  sum(rate(http_request_duration_seconds_bucket{job="$job"}[5m])) by (le)
)
legend -> p50, p90, p95, p99

# Average Duration Request
rate(http_request_duration_seconds_sum[1m])) / rate(http_request_duration_seconds_count[1m])
legend -> {{method}}{{path}}{{status}}

# CPU Usage
process_cpu_usage{job="fastapi-app"}

# Open File Descriptors
process_open_fds{ job="fastapi-app"} / process_max_fds{ job="fastapi-app"}

# Memory Usage
process_resident_memory_bytes{ job="fastapi-app"}
process_virtual_memory_bytes{ job="fastapi-app"}
process_memory_usage_bytes{ job="fastapi-app"}

# GC Object Collected
rate(python_gc_collections_total{job="fastapi-app"}[5m])


KUBERNETES

#apk
# Download helm
# Update package index and install required tools
apk update && apk add curl tar gzip bash

# Download and run the official Helm install script
curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | sh

# Verify installation
helm version

# To add the Prometheus Helm chart repository
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

# search
helm search repo prometheus-community/kube-prometheus-stack --versions

# Install
helm install prometheus prometheus-community/kube-prometheus-stack \
  --version 45.7.1 \
  --namespace monitoring \
  --create-namespace

kubectl get pods -n monitoring
kubectl get svc -n monitoring
kubectl port-forward -n monitoring svc/prometheus-operated 9090:9090
kubectl port-forward -n monitoring svc/prometheus-grafana 3000:80
# kubectl get secret -n monitoring prometheus-grafana
# kubectl get secret -n monitoring prometheus-grafana -o jsonpath="{.data.admin-password}" | base64 --decode; echo

git clone https://github.com/rslim087a/application-monitoring-prometheus.git
cd application-monitoring-prometheus
kubectl apply -f
kubectl get svc -n monitoring
kubectl port-forward -n monitoring svc/fastapi-app 8000:8000



# To use prometheus-community/prometheus instead
# Update packages and install basic tools
apk update && apk add curl tar gzip bash

# Download and install Helm
curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

# Verify Helm installation
helm version

# Add Prometheus Helm chart repository
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

# Optional: Search for available Prometheus chart versions
helm search repo prometheus-community/prometheus --versions

# Install only Prometheus (not the full monitoring stack)
helm install prometheus prometheus-community/prometheus \
  --version 25.27.0 \
  --namespace monitoring \
  --create-namespace

# Verify that pods are running
kubectl get pods -n monitoring

# Check the Prometheus services
kubectl get svc -n monitoring


==================================================
# if experiencing nodeExporter container not creating..
# and want to disable it

helm upgrade prometheus prometheus-community/prometheus \
  --namespace monitoring \
  --reuse-values \
  --set nodeExporter.enabled=false \
  --set nodeExporter.hostRootFsMount.enabled=false

kubectl delete daemonset prometheus-prometheus-node-exporter -n monitoring --ignore-not-found
kubectl delete pod -n monitoring -l app.kubernetes.io/name=prometheus-node-exporter --ignore-not-found
kubectl delete serviceaccount prometheus-prometheus-node-exporter -n monitoring --ignore-not-found
kubectl delete clusterrole prometheus-prometheus-node-exporter --ignore-not-found
kubectl delete clusterrolebinding prometheus-prometheus-node-exporter --ignore-not-found

kubectl get pods -n monitoring
kubectl get daemonset -n monitoring
======================================================


MYSQL

git clone https://github.com/rslim087a/mysql-prometheus-sample.git
cd mysql-prometheus-sample/mysql/
kubectl create namespace database-monitoring
kubectl apply -f .
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm search repo prometheus-community

add to mysql-exporter/mysql-exporter-values.yaml 
mysql:
  host: "mysql.database-monitoring.svc.cluster.local" # specifying the ns
  pass: "mysqluser"
  port: 3306
  #user: ""
  # secret only containing the password
  existingPasswordSecret:
    name: "mysql-secret" # secret file
    key: "MYSQL_PASSWORD" # key referring to the password

cd..
helm install mysql-exporter prometheus-community/prometheus-mysql-exporter -n database-monitoring
kubectl port-forward svc/mysql-exporter-prometheus-mysql-exporter 9104:9104 -n database-monitoring 
kubectl get secret -n database-monitoring
helm upgrade mysql-exporter prometheus-community/prometheus-mysql-exporter -n database-monitoring --values mysql-exporter/mysql-exporter-values.yaml

add to mysql-exporter/mysql-exporter-values.yaml
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  additionalLabels:
    release: prometheus # if you installed with kube-prometheus-stack

kubectl apply -f grafana -n monitoring
kubectl get pods -n monitoring
kubectl port-forward svc/prometheus-grafana 3000:80 -n monitoring
  

POSTGRES

git clone https://github.com/rslim087a/postgres-prometheus-sample.git
cd postgres-prometheus-sample/postgres
kubectl create namespace database-monitoring
kubectl apply -f .

add this to postgres-exporter file

# PostgreSQL Exporter Helm Values
config:
  ## The datasource properties on config are passed through helm tpl function.
  ## ref: https://helm.sh/docs/developing_charts/#using-the-tpl-function
  datasource:
    # Specify one of both datasource or datasourceSecret
    host: 'postgresql.database-monitoring.svc.cluster.local'
    port: "5432"
    userSecret:
    # Secret name
      name: 'postgresql-secret'
    # User key inside secret
      key: 'POSTGRES_USER'
    passwordSecret:
    # Secret name
      name: 'postgresql-secret'
    # User key inside secret
      key: 'POSTGRES_PASSWORD'


kubectl get secret -n database-monitoring 
#NAME                TYPE     DATA   AGE
#postgresql-secret   Opaque   2      10m
# Grab the name.. add to name: -> exportder file

helm install postgres-exporter prometheus-community/prometheus-postgres-exporter -f postgres-exporter/postgresql-exporter-values.yaml -n database-monitoring

#add service monitor block to exporter file
serviceMonitor:
  enabled: true
  labels:
    release: prometheus

helm upgrade postgres-exporter prometheus-community/prometheus-postgres-exporter -f postgres-exporter/postgresql-exporter-values.yaml -n database-monitoring

kubectl apply -f grafana -n monitoring
kubectl get svc -n monitoring
kubectl port-forward svc/prometheus-grafana 3000:80 -n monitoring


MONGODB

git clone https://github.com/rslim087a/mongodb-exporter-sample.git

# exporter file
# If the multi-target mode is enabled, this value will be ignored.
# [mongodb[+srv]://][user:pass@]host1[:port1][,host2[:port2],...][/database][?options]
mongodb:
  # uri: "mongodb://admin:password123@mongodb.mongodb.svc.cluster.local:27017"
  existingSecret:
    name: "mongodb-secret"
    key: "CONNECTION_URI"

  serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  additionalLabels:
    release: prometheus
  

helm install mongodb-exporter prometheus-community/prometheus-mongodb-exporter -f mongodb-exporter/mongodb-exporter-values.yaml -n mongodb

